import java.util.*;
class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        
         int sum=0,result=0;
        for(int i=0;i<nums.length;i++)
        {
            sum+=nums[i];
        }
        target=(int)Math.abs(target);
        int rsum=(sum+target)/2;
        
        if((sum+target)%2!=0)
        {
            return 0;
        }
        else
        {
         return countSubsetSumDiff(nums,rsum);
        
        }
        
    }
    
    public int countSubsetSumDiff(int nums[],int rsum)
    {
        int t[][]=new int[nums.length+1][rsum+1];
   t[0][0] = 1;
	int k = 1;
	for (int i = 0; i <= nums.length; i++) {
		for (int j = 0; j <= rsum; j++) {
			if (i == 0 && j > 0)
				t[i][j] = 0;
			if (j == 0 && i > 0) {
				if (nums[i - 1] == 0) {
					t[i][j] = (int)Math.pow(2, k);
					k++;
				}
				else
					t[i][j] = t[i - 1][j];
			}
		}
	}
        
        
        for(int i=1;i<=nums.length;i++)
        {
            for(int j=1;j<=rsum;j++)
            {
                if(nums[i-1]<=j)
                {
                    t[i][j]=t[i-1][j]+t[i-1][j-nums[i-1]];
                }
                else
                {     t[i][j]=t[i-1][j];
                                             }
            }
        }
                                             
      return t[nums.length][rsum];
    }
}
