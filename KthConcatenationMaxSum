class Solution {
    public int kConcatenationMaxSum(int[] arr, int k) {
        
       long sum=0;
        long M = 1000000007;
        for(int i=0;i<arr.length;i++)
        {
            sum=sum+arr[i];
        }
        int ans=0;
       if(k==1)
       {
           ans=(int)(kadanes(arr)%M);
       }
        else if(sum<0)
        {
            ans=Math.toIntExact(kadanes2copies(arr)%M);
        }
        else if(sum>=0)
        {
            ans=Math.toIntExact((kadanes2copies(arr)+(k-2)*sum)%M);
            
        }
        return (int)(ans%M);
    }
    
    public int kadanes2copies(int[] arr)
    {
        int narr[]=new int[2*arr.length];
        for(int i=0;i<arr.length;i++)
        {
            narr[i]=arr[i];
        }
        
        for(int i=0;i<arr.length;i++)
        {
            narr[i+arr.length]=arr[i];
        }
        return kadanes(narr);
    }
    
    public int kadanes(int[] arr)
    {
        int csum=arr[0];
        int osum=arr[0];
        int c=0;
        if(arr[0]<0)
        {
            c++;
        }
        for(int i=1;i<arr.length;i++)
        {
               if(arr[i]<0)
            {
                c++;
            }
            if(csum>=0)
            {
                csum+=arr[i];
            }
            else{
                csum=arr[i];
            }
            if(csum>osum)
            {
                osum=csum;
            }
        }
           if(c==arr.length)
         {
             return 0;
         }
        return osum;
    }
}
