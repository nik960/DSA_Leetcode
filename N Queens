class Solution {
    public List<List<String>> solveNQueens(int n) {
        
       List<List<String>> list=new ArrayList<>();
        boolean board[][]=new boolean[n][n];
        solveNQueens(board,list,0);
        return list;
    }
    
    public void solveNQueens(boolean board[][],List<List<String>> list,int row)
    {
        int n=board.length;
        if(row==board.length)
        {
            printSolution(board,list);
            return;
        }
        
        for(int i=0;i<n;i++)
        {
            if(isSafe(board,row,i,n))
            {
                board[row][i]=true;
                solveNQueens(board,list,row+1);
                board[row][i]=false;
            }
        }
    }
    
    public boolean isSafe(boolean board[][],int row,int col,int n)
    {
        
        
        for(int i=0;i<row;i++)
        {
            if(board[i][col]==true)
            {
                return false;
            }
        }
        
        for(int i=row,j=col;i>=0 && j>=0;i--,j--)
        {
            if(board[i][j]==true)
            {
                return false;
            }
        }
        
        for(int i=row,j=col;i>=0 && j<n;i--,j++)
        {
            if(board[i][j]==true)
            {
                return false;
            }
        }
        return true;
    }
    
    public void printSolution(boolean board[][],List<List<String>> list)
    {
        List<String> demo=new ArrayList<>();
       
        for(int i=0;i<board.length;i++)
        {
             String str="";
            for(int j=0;j<board.length;j++)
            {
                if(board[i][j])
                {
                    str+="Q";
                }
                else
                {
                    str+=".";
                }
            }
            demo.add(str);
        }
        
        list.add(demo);
    }
    
}
